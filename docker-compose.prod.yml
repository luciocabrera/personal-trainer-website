services:
  app:
    build: .
    container_name: personal-trainer-app
    restart: unless-stopped
    networks:
      - app-network
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - PORT=3000
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-admin123}@postgres:5432/${POSTGRES_DB:-personal_trainer}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-personal_trainer}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin123}
      # Email Configuration
      - EMAIL_PROVIDER=${EMAIL_PROVIDER}
      - GMAIL_USER=${GMAIL_USER}
      - GMAIL_APP_PASSWORD="${GMAIL_APP_PASSWORD}"
      - EMAIL_TO=${EMAIL_TO}
      - EMAIL_FROM=${EMAIL_FROM}
      - SEND_AUTO_REPLY=${SEND_AUTO_REPLY}
      - RESEND_API_KEY=${RESEND_API_KEY}
    # Only expose to internal network, not to host
    # ports:
    #   - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  nginx:
    image: nginx:alpine
    container_name: personal-trainer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    container_name: personal-trainer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-personal_trainer}
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-admin123}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-personal_trainer}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  # pgAdmin for database management (optional - comment out for production)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: personal-trainer-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@personal-trainer.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    # Uncomment for production security
    # profiles:
    #   - tools

  # Optional: Automatic SSL certificate management with Let's Encrypt
  certbot:
    image: certbot/certbot
    container_name: personal-trainer-certbot
    volumes:
      - ./ssl:/etc/letsencrypt
      - ./logs/letsencrypt:/var/log/letsencrypt
      - ./nginx/html:/var/www/html
    # Run certbot manually or via cron
    # Example: docker-compose run --rm certbot certonly --webroot -w /var/www/html -d yourdomain.com
    profiles:
      - tools

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
